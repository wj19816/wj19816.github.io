I"E<blockquote>
  <p>Linux系统使用的常用操作及</p>
</blockquote>

<!-- more -->

<h1 id="linux">Linux</h1>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="rouge-code"><pre><span class="c"># 一些简单的常用操作</span>
<span class="c">## tips:按tab键可以快速填充</span>

<span class="nb">ls</span> <span class="c">#查看文件夹</span>

<span class="nb">cd </span>xxxx   <span class="c">##前往文件夹</span>
<span class="nb">cd</span> ..     <span class="c">#前往上层文件夹</span>

<span class="nb">pwd</span>   <span class="c">#查看当前文件夹的绝对路径</span>

<span class="nb">mkdir</span> <span class="c">#新建文件夹</span>
<span class="nb">rm</span> <span class="nt">-r</span> <span class="nt">-f</span> <span class="c">#删除文件夹：-r 删除文件夹里的所有目录 -f 直接强行删除</span>
<span class="nb">rm</span> <span class="nt">-f</span> dir-<span class="k">*</span>.jpg  <span class="c">#可以用通配符*同时删除多个文件</span>
<span class="nb">rm</span> <span class="nt">-i</span> <span class="nb">dir</span>  <span class="c">#在删除前进行询问</span>

<span class="nb">cp</span> <span class="c">#复制文件</span>
<span class="nb">cp</span> <span class="nt">-a</span> <span class="nb">source </span>destination <span class="c">#复制文件属性+递归持续复制（复制整个目录）</span>
<span class="c">#如果destination为文件名，则重命名</span>

<span class="nb">mv</span> <span class="nt">-f</span> <span class="nt">-u</span> <span class="c">#移动文件与目录，或修改名称：-f 强制删除 -i 询问是否覆盖 -u 若已存在，而source比较新，才会升级</span>
<span class="nb">mv</span> /usr/lib/<span class="k">*</span>  /zone#把文件夹下所有文件移动到当前文件夹

./test.sh <span class="c">#运行某个shell脚本，必须要加上“./”，如果不加，系统会去/bin之类的系统目录里查找该文件</span>

<span class="nb">touch </span>xxx   <span class="c">#创建文件</span>
<span class="nb">cat</span> <span class="nt">-n</span> xxx  <span class="c">#从第一行开始显示文件内容,同时输出行号（若要空白行不显示行号，用-b）</span>
<span class="nb">tac </span>xxx     <span class="c">#从最后一行开始显示文件内容</span>
<span class="nb">nl </span>xxx      <span class="c">#显示时顺便输出行号</span>
more xxx    <span class="c">#分页显示文件内容，空格：翻一页 回车：翻一行 /子串：在当前搜索该关键字</span>
less xxx    <span class="c">#分页显示文件内容，但可以向前翻页 ?字串：向上搜索关键词 n：重复前一个搜索</span>
<span class="nb">head</span> <span class="nt">-n</span> 20 xxx    <span class="c">#只看前几行,默认显示10行</span>
<span class="nb">tail </span>xxx    <span class="c">#只看最后几行</span>

<span class="nb">nohup</span> .... <span class="o">&gt;</span> output.log 2&gt;&amp;1 &amp; <span class="c">#后台运行</span>


<span class="c"># 关机操作</span>
<span class="nb">sync</span> <span class="c">#将数据内存同步到硬盘</span>
shutdown <span class="nt">-h</span> now <span class="c">#立马关机</span>
shutdown <span class="nt">-r</span> +10 <span class="c">#十分钟后重启</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif" alt="img" /></p>

<h2 id="vim">Vim</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="c">#刚进入vim时默认进入命令模式</span>
i  <span class="c">#切换到输入模式</span>
x  <span class="c">#删除当前光标所在字符</span>
:  <span class="c">#切换到底线命令模式，在最底一行输入命令</span>

<span class="c">#底线命令模式</span>
:w  <span class="c">#保存</span>
:q!  <span class="c">#不保存，强行离开</span>
:wq  <span class="c">#保存后离开</span>
:w <span class="o">[</span>filename]  <span class="c">#储存成另一个文档</span>
:r <span class="o">[</span>filename]  <span class="c">#在当前文档中读入另一个文档的数据，插入到当前光标后</span>
:n1,n2 <span class="o">[</span>filename]  <span class="c">#将n1行到n2行的内容储存成新文档</span>
:![commond]  <span class="c">#暂时离开vim到命令行中执行command</span>

<span class="c">#快捷键操作</span>
H/M/L  <span class="c">#光标移动到这个屏幕的最上方/中央/下方那一行的第一个字符</span>
ndd  <span class="c">#删除光标所在的向下n行</span>
d1G  <span class="c">#删除光标到第一行的所有数据</span>
dG   <span class="c">#删除光标到最后一行的所有数据</span>
yy   <span class="c">#复制光标所在哪一行</span>

<span class="c">#搜索替换</span>
/word  <span class="c">#向下寻找</span>
?word  <span class="c">#向上寻找</span>
n   <span class="c">#继续向下寻找</span>
N   <span class="c">#返回向上寻找</span>
:n1,n2s/word1/word2/g  <span class="c">#在n1与n2行之间寻找word1，并将该字符串取代为word2（1：第一行，$最后一行</span>

<span class="c">#环境设置</span>
:set nu <span class="c">#显示行号</span>
:set nonu <span class="c">#取消行号</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="c">#批量添加注释</span>
1. ctrl+v 进入块选择模式
2. 移动光标选择所要的行
3. 大写I进入插入模式
4. 输入注释符号//或#
5. 按两下esc
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="快捷键">快捷键</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nb">command</span>+D  <span class="c">#在同一窗口内打开另一个shell窗口标签</span>
<span class="nb">command</span>+←→ <span class="c">#快速移动到行首或行尾</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="shell">Shell</h1>

<blockquote>
  <p>shell编程环境也有许多，如Bourne Shell、Bourne Again Shell、C Shell、K Shell等，一般常用的是Bourne Again Shell(即bash)，这也是linux系统默认的shell。</p>
</blockquote>

<h2 id="常用">常用</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre><span class="c">#!/bin/bash          #指定shell解释器</span>

<span class="c">#echo</span>
<span class="nb">echo</span> <span class="s1">'输出一些文字'</span> 
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"OK!</span><span class="se">\n</span><span class="s2">"</span>   <span class="c">#-e 开启转义</span>
<span class="nb">echo</span> <span class="s2">"hello world!"</span> <span class="o">&gt;</span> myfile  <span class="c">#结果重定向至文件</span>
<span class="nb">echo</span> <span class="sb">`</span><span class="nb">date</span><span class="sb">`</span>  <span class="c">#显示时间</span>

<span class="c">#变量</span>
<span class="nv">var1</span><span class="o">=</span><span class="s1">'定义一个变量，等号周围没有空格'</span>
<span class="nb">readonly </span>var1  <span class="c">#只读变量</span>
<span class="nb">unset </span>var1     <span class="c">#删除变量</span>

<span class="c">#字符串</span>
<span class="nb">echo</span> <span class="s1">'${var1}，使用一个变量'</span>   <span class="c">#!!单引号中的所有字符都会被原样输出，引用变量无效</span>
<span class="nb">echo</span> <span class="sb">`</span><span class="nb">expr </span>index <span class="s2">"</span><span class="nv">$string</span><span class="s2">"</span> io<span class="sb">`</span>  <span class="c">#查找字符i或o的位置(看哪个先出现)</span>
<span class="nb">echo</span> <span class="k">${#</span><span class="nv">string</span><span class="k">}</span>  <span class="c">#获取字符串长度</span>
<span class="nt">-z</span> <span class="c">#检测字符串长度是否为0</span>
<span class="nt">-n</span> <span class="c">#检测字符串长度是否不为0</span>
<span class="nv">$ </span> <span class="c">#检测字符串是否为空</span>

<span class="c">#定义数组</span>
<span class="nv">array_n</span><span class="o">=(</span>v0 v1 v2<span class="o">)</span>
array_n[n]<span class="o">=</span>vn  <span class="c">#可以不使用连续的下标，而且下标的范围没有限制</span>
<span class="k">${</span><span class="nv">array_n</span><span class="p">[@]</span><span class="k">}</span>  <span class="c">#读取数组中的所有元素</span>

<span class="c">#Shell 里面的中括号（包括单中括号与双中括号）可用于一些条件的测试</span>
<span class="o">[</span> <span class="nv">$var</span> <span class="nt">-eq</span> 0 <span class="o">]</span> <span class="c">#变量是否为0</span>
<span class="o">[</span> <span class="nt">-e</span> <span class="nv">$var</span> <span class="o">]</span>    <span class="c">#文件是否存在</span>
<span class="o">[</span> <span class="nt">-d</span> <span class="nv">$var</span> <span class="o">]</span>    <span class="c">#是否是目录</span>
<span class="o">[[</span> <span class="nv">$var1</span> <span class="o">=</span> <span class="nv">$var2</span> <span class="o">]]</span> <span class="c">#字符串比较</span>

<span class="nt">-s</span> file  <span class="c">#检测文件是否存在，不为空返回true</span>
<span class="nt">-e</span> file  <span class="c">#检测文件（或目录）是否存在，如果是，返回true</span>

<span class="c">#printf（不会自动换行），但更适合格式输出</span>
<span class="nb">read </span>var  <span class="c">#从键盘读入输入</span>

<span class="nb">readlink</span> <span class="nt">-f</span> <span class="c">#一直跟随符号链接，直到直到非符号链接的文件位置</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="控制逻辑">控制逻辑</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="rouge-code"><pre><span class="c">#if条件</span>
<span class="k">if </span>condition
<span class="k">then
		</span>command1
<span class="k">elif </span>condition2
<span class="k">then
		</span>command2
<span class="k">else
		</span>command3
<span class="k">fi</span>


<span class="c">#for循环</span>
<span class="k">for </span>var <span class="k">in </span>i1 i2 i3
<span class="k">do 
		</span>command1
		command2
<span class="k">done</span>


<span class="c">#while循环</span>
<span class="k">while </span>condition
<span class="k">do
		</span><span class="nb">command
</span><span class="k">done</span>
	
	
<span class="c">#until循环:和while循环相反，直到条件为true时停止(用得少)</span>
<span class="k">until </span>condition
<span class="k">do 
		</span><span class="nb">command
</span><span class="k">done</span>


<span class="c">#case</span>
<span class="k">case</span> array <span class="k">in 
	</span>1<span class="p">)</span> <span class="nb">command</span>
	<span class="p">;;</span>
	2<span class="p">)</span> <span class="nb">command</span>
	<span class="p">;;</span>
	<span class="k">*</span><span class="p">)</span> <span class="nb">command</span>
	<span class="p">;;</span>
<span class="k">esac</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="运算符">运算符</h2>

<blockquote>
  <p>原生bash不支持数学运算，但可以用awk和expr来进行求值操作。</p>
</blockquote>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="c">#数学运算</span>
<span class="nv">val</span><span class="o">=</span><span class="sb">`</span><span class="nb">expr </span>2 + 2<span class="sb">`</span> <span class="c">#!!!表达式和运算法之间一定要有空格</span>

<span class="c">#关系运算</span>
<span class="nt">-eq</span>   <span class="c">#equal</span>
<span class="nt">-ne</span>   <span class="c">#not equal</span>
<span class="nt">-gt</span>   <span class="c">#great than</span>
<span class="nt">-lt</span>   <span class="c">#lower than</span>
<span class="nt">-ge</span>   <span class="c">#great equal</span>
<span class="nt">-le</span>   <span class="c">#lower equal</span>

<span class="c">#布尔运算</span>
<span class="o">!</span>    <span class="c">#非</span>
<span class="nt">-o</span>   <span class="c">#或，有一个为true即为true （or）</span>
<span class="nt">-a</span>   <span class="c">#与，两个都为true才为true （and）</span>

<span class="c">#逻辑运算</span>
<span class="o">&amp;&amp;</span>  <span class="c">#逻辑的and [[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</span>
<span class="o">||</span>  <span class="c">#逻辑的or  [[ $a -lt 100 || $b -gt 100 ]] 返回 true</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="脚本参数">脚本参数</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nv">$# </span> <span class="c">#传递到脚本的参数个数</span>
<span class="nv">$*</span>  <span class="c">#显示所有向脚本传递的参数</span>
<span class="nv">$$</span>  <span class="c">#脚本当前运行的进程ID号</span>
<span class="nv">$!</span>  <span class="c">#后台运行的最后一个进程的ID号</span>
<span class="nv">$@</span>  <span class="c">#用引号分割，显示所有脚本参数</span>
<span class="nv">$-</span>  <span class="c">#显示shell使用的当前选项</span>
<span class="nv">$?</span>  <span class="c">#显示最后命令的退出状态。0表示没有错误。</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c">#注释相关</span>
:&lt;&lt;<span class="s1">'
这是一段多行注释'</span>

:&lt;&lt;<span class="o">!</span>
这也可以是一段多行注释!

<span class="c">#如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？每一行加个'#'符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="set-命令">set 命令</h2>

<p><code class="language-plaintext highlighter-rouge">set</code>命令主要用来设置shell，在编写shell脚本时，使用<code class="language-plaintext highlighter-rouge">set</code>命令能设置shell的执行方式，根据需求不同，采用的参数设置也不同。<code class="language-plaintext highlighter-rouge">set</code>命令也用来显示系统中已存在的shell变量以及设置新的shell变量。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nb">set</span>     <span class="c">#显示环境变量</span>
<span class="nb">set</span> <span class="nt">-e</span>  <span class="c">#只要脚本中发生错误，就停止执行并退出shell（否则虽然报错，但是依旧会继续运行</span>
<span class="nb">set</span> <span class="nt">-u</span>  <span class="c">#如果遇到不存在的变量会报错并停止执行（否则不报错，也继续执行）</span>
<span class="nb">set</span> <span class="nt">-x</span> 

<span class="c">## tips：set后的后缀改成+号则会关闭该功能。</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET